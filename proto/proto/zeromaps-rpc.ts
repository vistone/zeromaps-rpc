// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.21.12
// source: proto/zeromaps-rpc.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "zeromaps.rpc";

/**
 * ============================================
 * 帧类型定义
 * ============================================
 */
export enum FrameType {
  /** UNKNOWN_FRAME - Proto3 要求第一个值为 0 */
  UNKNOWN_FRAME = 0,
  /** PROXY_REQUEST - 现有的代理协议（保留兼容） */
  PROXY_REQUEST = 1,
  PROXY_RESPONSE = 2,
  DATA = 3,
  CLOSE = 4,
  /** HANDSHAKE_REQUEST - 新增的 RPC 协议 */
  HANDSHAKE_REQUEST = 16,
  HANDSHAKE_RESPONSE = 17,
  DATA_REQUEST = 18,
  DATA_RESPONSE = 19,
  UNRECOGNIZED = -1,
}

export function frameTypeFromJSON(object: any): FrameType {
  switch (object) {
    case 0:
    case "UNKNOWN_FRAME":
      return FrameType.UNKNOWN_FRAME;
    case 1:
    case "PROXY_REQUEST":
      return FrameType.PROXY_REQUEST;
    case 2:
    case "PROXY_RESPONSE":
      return FrameType.PROXY_RESPONSE;
    case 3:
    case "DATA":
      return FrameType.DATA;
    case 4:
    case "CLOSE":
      return FrameType.CLOSE;
    case 16:
    case "HANDSHAKE_REQUEST":
      return FrameType.HANDSHAKE_REQUEST;
    case 17:
    case "HANDSHAKE_RESPONSE":
      return FrameType.HANDSHAKE_RESPONSE;
    case 18:
    case "DATA_REQUEST":
      return FrameType.DATA_REQUEST;
    case 19:
    case "DATA_RESPONSE":
      return FrameType.DATA_RESPONSE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FrameType.UNRECOGNIZED;
  }
}

export function frameTypeToJSON(object: FrameType): string {
  switch (object) {
    case FrameType.UNKNOWN_FRAME:
      return "UNKNOWN_FRAME";
    case FrameType.PROXY_REQUEST:
      return "PROXY_REQUEST";
    case FrameType.PROXY_RESPONSE:
      return "PROXY_RESPONSE";
    case FrameType.DATA:
      return "DATA";
    case FrameType.CLOSE:
      return "CLOSE";
    case FrameType.HANDSHAKE_REQUEST:
      return "HANDSHAKE_REQUEST";
    case FrameType.HANDSHAKE_RESPONSE:
      return "HANDSHAKE_RESPONSE";
    case FrameType.DATA_REQUEST:
      return "DATA_REQUEST";
    case FrameType.DATA_RESPONSE:
      return "DATA_RESPONSE";
    case FrameType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * ============================================
 * 数据类型枚举
 * ============================================
 */
export enum DataType {
  UNKNOWN = 0,
  BULK_METADATA = 1,
  NODE_DATA = 2,
  IMAGERY_DATA = 3,
  UNRECOGNIZED = -1,
}

export function dataTypeFromJSON(object: any): DataType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return DataType.UNKNOWN;
    case 1:
    case "BULK_METADATA":
      return DataType.BULK_METADATA;
    case 2:
    case "NODE_DATA":
      return DataType.NODE_DATA;
    case 3:
    case "IMAGERY_DATA":
      return DataType.IMAGERY_DATA;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DataType.UNRECOGNIZED;
  }
}

export function dataTypeToJSON(object: DataType): string {
  switch (object) {
    case DataType.UNKNOWN:
      return "UNKNOWN";
    case DataType.BULK_METADATA:
      return "BULK_METADATA";
    case DataType.NODE_DATA:
      return "NODE_DATA";
    case DataType.IMAGERY_DATA:
      return "IMAGERY_DATA";
    case DataType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** 握手请求（客户端 → 服务器） */
export interface HandshakeRequest {
  /** 可选：客户端版本、系统信息等 */
  clientInfo: string;
}

/** 握手响应（服务器 → 客户端） */
export interface HandshakeResponse {
  /** 服务器分配的客户端ID: 1,2,3,4,5... */
  clientID: number;
  success: boolean;
  /** 可选：欢迎信息或错误信息 */
  message: string;
}

/** 数据请求（客户端 → 服务器） */
export interface DataRequest {
  /** 握手时分配的客户端ID */
  clientID: number;
  /** 数据类型枚举 */
  dataType: DataType;
  /** "04", "0413", "041320"... */
  tilekey: string;
  /** epoch 值 */
  epoch: number;
  /** 仅 dataType=IMAGERY_DATA 时使用 */
  imageryEpoch: number;
}

/** 数据响应（服务器 → 客户端） */
export interface DataResponse {
  /** 客户端ID */
  clientID: number;
  /** 回传：数据类型 */
  dataType: DataType;
  /** 回传：tilekey */
  tilekey: string;
  /** 回传：epoch */
  epoch: number;
  /** 回传：imageryEpoch */
  imageryEpoch: number;
  /** 二进制数据（成功时有数据） */
  data: Uint8Array;
  /** HTTP 状态码: 200=成功, 404=不存在, 403=被封, 500=错误, 0=网络错误 */
  statusCode: number;
}

function createBaseHandshakeRequest(): HandshakeRequest {
  return { clientInfo: "" };
}

export const HandshakeRequest: MessageFns<HandshakeRequest> = {
  encode(message: HandshakeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clientInfo !== "") {
      writer.uint32(10).string(message.clientInfo);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HandshakeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHandshakeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.clientInfo = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HandshakeRequest {
    return { clientInfo: isSet(object.clientInfo) ? globalThis.String(object.clientInfo) : "" };
  },

  toJSON(message: HandshakeRequest): unknown {
    const obj: any = {};
    if (message.clientInfo !== "") {
      obj.clientInfo = message.clientInfo;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HandshakeRequest>, I>>(base?: I): HandshakeRequest {
    return HandshakeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HandshakeRequest>, I>>(object: I): HandshakeRequest {
    const message = createBaseHandshakeRequest();
    message.clientInfo = object.clientInfo ?? "";
    return message;
  },
};

function createBaseHandshakeResponse(): HandshakeResponse {
  return { clientID: 0, success: false, message: "" };
}

export const HandshakeResponse: MessageFns<HandshakeResponse> = {
  encode(message: HandshakeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clientID !== 0) {
      writer.uint32(8).uint32(message.clientID);
    }
    if (message.success !== false) {
      writer.uint32(16).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(26).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HandshakeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHandshakeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.clientID = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HandshakeResponse {
    return {
      clientID: isSet(object.clientID) ? globalThis.Number(object.clientID) : 0,
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: HandshakeResponse): unknown {
    const obj: any = {};
    if (message.clientID !== 0) {
      obj.clientID = Math.round(message.clientID);
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HandshakeResponse>, I>>(base?: I): HandshakeResponse {
    return HandshakeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HandshakeResponse>, I>>(object: I): HandshakeResponse {
    const message = createBaseHandshakeResponse();
    message.clientID = object.clientID ?? 0;
    message.success = object.success ?? false;
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseDataRequest(): DataRequest {
  return { clientID: 0, dataType: 0, tilekey: "", epoch: 0, imageryEpoch: 0 };
}

export const DataRequest: MessageFns<DataRequest> = {
  encode(message: DataRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clientID !== 0) {
      writer.uint32(8).uint32(message.clientID);
    }
    if (message.dataType !== 0) {
      writer.uint32(16).int32(message.dataType);
    }
    if (message.tilekey !== "") {
      writer.uint32(26).string(message.tilekey);
    }
    if (message.epoch !== 0) {
      writer.uint32(32).uint32(message.epoch);
    }
    if (message.imageryEpoch !== 0) {
      writer.uint32(40).uint32(message.imageryEpoch);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.clientID = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.dataType = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.tilekey = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.epoch = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.imageryEpoch = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataRequest {
    return {
      clientID: isSet(object.clientID) ? globalThis.Number(object.clientID) : 0,
      dataType: isSet(object.dataType) ? dataTypeFromJSON(object.dataType) : 0,
      tilekey: isSet(object.tilekey) ? globalThis.String(object.tilekey) : "",
      epoch: isSet(object.epoch) ? globalThis.Number(object.epoch) : 0,
      imageryEpoch: isSet(object.imageryEpoch) ? globalThis.Number(object.imageryEpoch) : 0,
    };
  },

  toJSON(message: DataRequest): unknown {
    const obj: any = {};
    if (message.clientID !== 0) {
      obj.clientID = Math.round(message.clientID);
    }
    if (message.dataType !== 0) {
      obj.dataType = dataTypeToJSON(message.dataType);
    }
    if (message.tilekey !== "") {
      obj.tilekey = message.tilekey;
    }
    if (message.epoch !== 0) {
      obj.epoch = Math.round(message.epoch);
    }
    if (message.imageryEpoch !== 0) {
      obj.imageryEpoch = Math.round(message.imageryEpoch);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DataRequest>, I>>(base?: I): DataRequest {
    return DataRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DataRequest>, I>>(object: I): DataRequest {
    const message = createBaseDataRequest();
    message.clientID = object.clientID ?? 0;
    message.dataType = object.dataType ?? 0;
    message.tilekey = object.tilekey ?? "";
    message.epoch = object.epoch ?? 0;
    message.imageryEpoch = object.imageryEpoch ?? 0;
    return message;
  },
};

function createBaseDataResponse(): DataResponse {
  return { clientID: 0, dataType: 0, tilekey: "", epoch: 0, imageryEpoch: 0, data: new Uint8Array(0), statusCode: 0 };
}

export const DataResponse: MessageFns<DataResponse> = {
  encode(message: DataResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clientID !== 0) {
      writer.uint32(8).uint32(message.clientID);
    }
    if (message.dataType !== 0) {
      writer.uint32(16).int32(message.dataType);
    }
    if (message.tilekey !== "") {
      writer.uint32(26).string(message.tilekey);
    }
    if (message.epoch !== 0) {
      writer.uint32(32).uint32(message.epoch);
    }
    if (message.imageryEpoch !== 0) {
      writer.uint32(40).uint32(message.imageryEpoch);
    }
    if (message.data.length !== 0) {
      writer.uint32(50).bytes(message.data);
    }
    if (message.statusCode !== 0) {
      writer.uint32(56).uint32(message.statusCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.clientID = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.dataType = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.tilekey = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.epoch = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.imageryEpoch = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.statusCode = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataResponse {
    return {
      clientID: isSet(object.clientID) ? globalThis.Number(object.clientID) : 0,
      dataType: isSet(object.dataType) ? dataTypeFromJSON(object.dataType) : 0,
      tilekey: isSet(object.tilekey) ? globalThis.String(object.tilekey) : "",
      epoch: isSet(object.epoch) ? globalThis.Number(object.epoch) : 0,
      imageryEpoch: isSet(object.imageryEpoch) ? globalThis.Number(object.imageryEpoch) : 0,
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
      statusCode: isSet(object.statusCode) ? globalThis.Number(object.statusCode) : 0,
    };
  },

  toJSON(message: DataResponse): unknown {
    const obj: any = {};
    if (message.clientID !== 0) {
      obj.clientID = Math.round(message.clientID);
    }
    if (message.dataType !== 0) {
      obj.dataType = dataTypeToJSON(message.dataType);
    }
    if (message.tilekey !== "") {
      obj.tilekey = message.tilekey;
    }
    if (message.epoch !== 0) {
      obj.epoch = Math.round(message.epoch);
    }
    if (message.imageryEpoch !== 0) {
      obj.imageryEpoch = Math.round(message.imageryEpoch);
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    if (message.statusCode !== 0) {
      obj.statusCode = Math.round(message.statusCode);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DataResponse>, I>>(base?: I): DataResponse {
    return DataResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DataResponse>, I>>(object: I): DataResponse {
    const message = createBaseDataResponse();
    message.clientID = object.clientID ?? 0;
    message.dataType = object.dataType ?? 0;
    message.tilekey = object.tilekey ?? "";
    message.epoch = object.epoch ?? 0;
    message.imageryEpoch = object.imageryEpoch ?? 0;
    message.data = object.data ?? new Uint8Array(0);
    message.statusCode = object.statusCode ?? 0;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
