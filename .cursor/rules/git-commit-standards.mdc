---
alwaysApply: true
description: GitHub 提交和版本管理严格规范
---

# GitHub 提交标准化规范

## ⚠️ 每次提交前必须完成的步骤

### 1. 更新 package.json 版本号
- **必须**将 `version` 字段的 **patch 版本号 +1**
- 格式：`主版本.次版本.补丁版本`（如 2.0.16 → 2.0.17）

### 2. 检查是否有未提交的依赖变更
- 如果修改了依赖（npm install），**必须**提交 `package-lock.json`
- 检查命令：`git status | grep package-lock`

### 3. Commit 消息格式（严格遵循）

```
<type>: <description> (v<version>)

<详细说明（可选，多行）>
```

**Type 类型（必须使用以下之一）：**
- `feat`: 新功能
- `fix`: 修复 bug  
- `perf`: 性能优化
- `refactor`: 代码重构
- `docs`: 文档更新
- `chore`: 构建/工具更新
- `style`: 代码格式调整

**示例：**
```bash
feat: 实现 Webhook 自动转发到所有节点 (v2.0.17)

- 添加节点列表配置
- 实现自动转发机制
- 并发转发到所有节点
- 防止循环转发
```

### 4. 创建 Git Tag（必须）

```bash
git tag v2.0.17
```

### 5. 推送到 GitHub（必须同时推送代码和标签）

```bash
git push && git push --tags
```

---

## 🔄 远程节点更新规范

### ⚠️ 重要：远程节点更新使用强制同步

在远程节点（tile0, tile3, tile4 等）更新时，**严格按照以下流程**：

#### **自动更新脚本（推荐）**

```bash
cd /opt/zeromaps-rpc
sudo ./update.sh
```

`update.sh` 脚本会自动：
1. 使用 `git reset --hard origin/master` 强制同步
2. 执行 `npm install` 更新依赖
3. 执行 `npm run build` 编译代码
4. 重启 PM2 服务

#### **手动更新流程**

如果需要手动更新，**必须使用以下命令**：

```bash
cd /opt/zeromaps-rpc

# 1. 强制同步远程代码（不要用 git pull）
git fetch origin master
git reset --hard origin/master

# 2. 更新依赖
npm install

# 3. 编译
npm run build

# 4. 重启服务
pm2 restart zeromaps-rpc
```

#### **❌ 禁止的操作**

```bash
# ❌ 不要用 git pull（会因为 package-lock.json 冲突失败）
git pull

# ❌ 不要用 git stash（会保留本地修改，导致后续冲突）
git stash
git pull
```

#### **✅ 正确的思路**

- **开发环境（本地）**：正常提交，保留历史
- **生产环境（远程节点）**：强制同步，不保留本地修改
- 原因：远程节点的本地修改（如自动生成的 lock 文件）无需保留

---

## 📋 完整提交流程（AI 必须遵循）

```bash
# 1. 修改代码
# ... 编辑代码 ...

# 2. 检查依赖变更
if git status | grep -q "package-lock.json"; then
    echo "检测到依赖变更，将一并提交"
fi

# 3. 更新版本号（patch +1）
# 编辑 package.json，version 字段 +1

# 4. 添加所有更改（包括 package-lock.json）
git add -A

# 5. 提交（严格格式）
git commit -m "<type>: <description> (v版本号)

<详细说明>"

# 6. 创建标签
git tag v版本号

# 7. 推送代码和标签
git push && git push --tags

# 8. 验证推送成功
git log --oneline --decorate -1
```

---

## 🚨 AI 执行规则

### **提交代码时（AI 必须）：**

1. ✅ **总是** 更新 `package.json` 版本号
2. ✅ **总是** 使用标准化的 commit 消息格式
3. ✅ **总是** 创建对应的 Git Tag
4. ✅ **总是** 同时推送代码和 Tag
5. ✅ **总是** 检查 `package-lock.json` 是否需要提交
6. ✅ **总是** 验证推送成功

### **给用户远程节点更新建议时（AI 必须）：**

1. ✅ **总是** 建议使用 `sudo ./update.sh`
2. ✅ **总是** 如果手动更新，建议用 `git reset --hard origin/master`
3. ❌ **禁止** 建议使用 `git pull`
4. ❌ **禁止** 建议使用 `git stash`

### **遇到远程节点冲突时（AI 必须）：**

```bash
# 直接告诉用户执行（不要问）：
cd /opt/zeromaps-rpc
git fetch origin master
git reset --hard origin/master
npm install
npm run build
sudo ./update.sh
```

---

## ❌ 错误示例

```bash
# ❌ 错误：没有版本号
git commit -m "添加新功能"

# ❌ 错误：版本号没有递增  
# package.json 还是 2.0.17

# ❌ 错误：没有创建 tag
git push  # 只推送了代码

# ❌ 错误：远程节点用 git pull
cd /opt/zeromaps-rpc
git pull  # 会因为 lock 文件冲突失败
```

## ✅ 正确示例

```bash
# ✅ 正确：完整流程
# 1. 更新版本 package.json: 2.0.17 → 2.0.18
# 2. 提交
git add -A
git commit -m "feat: 添加新功能 (v2.0.18)

- 功能1
- 功能2"

# 3. 创建 tag
git tag v2.0.18

# 4. 推送
git push && git push --tags

# 5. 远程节点更新
# 在 tile4 上执行：
cd /opt/zeromaps-rpc
sudo ./update.sh
```

---

## 🔍 版本号查询

```bash
# 查看当前版本
grep version package.json

# 查看最新 tag
git describe --tags --abbrev=0

# 查看远程最新提交
git log origin/master --oneline -1
```

---

## 💡 重要提醒

**AI 在每次提交前必须：**
1. 检查 [package.json](mdc:package.json) 版本号是否已更新
2. 检查 commit 消息是否包含版本号
3. 检查是否创建了对应的 Git Tag
4. 检查是否同时推送代码和 Tag
5. 如果有依赖变更，确保 `package-lock.json` 已提交

**AI 在远程节点遇到冲突时必须：**
1. 直接建议使用 `git reset --hard origin/master`
2. 不要建议使用 `git pull` 或 `git stash`
3. 优先建议使用 `sudo ./update.sh`（最安全）
