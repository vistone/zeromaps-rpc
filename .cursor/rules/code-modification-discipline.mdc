---
alwaysApply: true
description: 代码修改纪律和理解要求
---

# 代码修改纪律

## ⚠️ 核心原则

**在没有完全搞懂代码和要求的情况下，严禁私自乱写和乱改代码！**

## 📋 修改代码前的必要步骤

### 1. 充分理解现有代码
- ✅ 阅读相关文件的完整代码
- ✅ 理解类的设计和架构
- ✅ 理解函数的输入输出和副作用
- ✅ 理解依赖关系和调用链
- ❌ 不要只看几行就开始修改

### 2. 完全理解用户需求
- ✅ 仔细阅读用户的所有要求
- ✅ 理解用户想要什么，不想要什么
- ✅ 如果不确定，**先询问用户**
- ❌ 不要自己瞎猜和脑补
- ❌ 不要添加用户没要求的功能

### 3. 禁止的行为

#### ❌ 不要自己添加限制
- 不要添加并发限制（除非用户明确要求）
- 不要添加队列大小限制
- 不要添加超时控制（除非用户明确要求）
- 不要添加任何形式的"优化"限制

#### ❌ 不要乱创建文件
- 不要创建 .md 文档（除了 [README.md](mdc:README.md)）
- 不要创建临时脚本文件
- 不要创建测试文件（除非用户要求）
- 不要创建工具类（除非用户要求）

#### ❌ 不要瞎猜技术方案
- 不要在不懂的情况下使用新技术
- 不要自己臆测 API 用法
- 不要添加未经验证的"优化"参数
- 先查文档或询问用户，不要瞎编

#### ❌ 不要过度设计
- 用户要简单的就给简单的
- 不要添加"未来可能用到"的功能
- 不要创建复杂的抽象层
- Keep it simple, stupid (KISS)

## ✅ 正确的做法

### 当不理解时
1. **停下来**
2. **阅读代码**
3. **询问用户**
4. **理解后再动手**

### 当修改代码时
1. **只改用户要求的部分**
2. **不添加额外功能**
3. **不创建额外文件**
4. **保持代码简洁**

### 当遇到问题时
1. **先承认不懂**
2. **查文档或搜索**
3. **询问用户确认**
4. **不要猜测和瞎编**

## 📝 实际案例（反面教材）

### 错误案例 1: 添加不必要的限制
```typescript
// ❌ 错误：用户没要求限制并发，却加了 20 的限制
this.queue = fastq.promise(this.worker.bind(this), 20)

// ✅ 正确：用户说不要限制，就不限制
this.queue = fastq.promise(this.worker.bind(this), Infinity)
```

### 错误案例 2: 乱创建文件
```bash
# ❌ 错误：用户没要求，却创建了一堆文件
PERFORMANCE_OPTIMIZATION.md
diagnose-performance.sh
server/batch-curl-executor.ts
server/request-queue.ts
tests/test-performance.ts

# ✅ 正确：只修改现有文件，不乱创建
```

### 错误案例 3: 瞎猜 API 用法
```typescript
// ❌ 错误：不懂 curl-impersonate，瞎加参数
parts.push('--tcp-fastopen')
parts.push('--tcp-nodelay')
parts.push('--dns-servers 8.8.8.8')

// ✅ 正确：先查文档，确认参数存在再使用
```

## 🎯 总结

记住：
1. **理解 > 行动**
2. **询问 > 猜测**
3. **简单 > 复杂**
4. **遵循 > 创新**

**当不确定时，停下来问用户，不要自作聪明！**
