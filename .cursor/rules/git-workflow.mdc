---
alwaysApply: true
description: Git 提交规范和版本管理流程
---

# Git 提交规范

## ⚠️ 每次提交前必须完成

### 1. 更新版本号
在 [package.json](mdc:package.json) 中将 `version` 字段的 **patch 版本号 +1**

```json
// 例如：
"version": "1.2.80"  // 改为
"version": "1.2.81"  // +1
```

### 2. Commit 消息格式

```
<type>: <description> (v<version>)

<详细说明（可选）>
```

**Type 类型：**
- `feat`: 新功能
- `fix`: 修复 bug
- `perf`: 性能优化
- `refactor`: 代码重构
- `docs`: 文档更新
- `chore`: 构建/工具更新
- `style`: 代码格式调整

**示例：**
```bash
git commit -m "feat: 添加智能并发数计算 (v1.2.81)

- 自动根据系统内存计算最佳并发数
- 支持环境变量配置
- 范围限制在 1-20"
```

### 3. 创建 Git Tag

```bash
git tag v1.2.81
```

### 4. 推送到 GitHub

```bash
git push
git push --tags
```

## 📋 完整提交流程

```bash
# 1. 修改代码
# ... 编辑代码 ...

# 2. 更新版本号
# 编辑 package.json，version +1

# 3. 提交代码
git add .
git commit -m "feat: 功能描述 (v1.2.81)"

# 4. 创建标签
git tag v1.2.81

# 5. 推送
git push
git push --tags
```

## ❌ 错误示例

```bash
# ❌ 错误：没有版本号
git commit -m "添加新功能"

# ❌ 错误：版本号没有递增
# package.json 还是 1.2.80

# ❌ 错误：没有创建 tag
git push  # 只推送了代码，没有推送 tag
```

## ✅ 正确示例

```bash
# 1. 更新 package.json: 1.2.80 → 1.2.81
# 2. 提交
git add .
git commit -m "feat: 添加连接复用优化 (v1.2.81)"
# 3. 创建 tag
git tag v1.2.81
# 4. 推送
git push && git push --tags
```

## 🔍 版本号查询

查看当前版本：
```bash
grep version package.json
```

查看最新 tag：
```bash
git describe --tags --abbrev=0
```

## 重要提醒

⚠️ **AI 在提交代码前必须：**
1. 检查 [package.json](mdc:package.json) 版本号是否已更新
2. Commit 消息包含版本号
3. 创建对应的 Git Tag
4. 推送代码和 Tag

⚠️ **绝对不要：**
- 提交时忘记更新版本号
- Commit 消息不包含版本号
- 忘记创建 Git Tag
- 只推送代码不推送 Tag
